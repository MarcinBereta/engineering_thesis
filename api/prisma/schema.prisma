// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  username                String             @unique
  verified                Boolean            @default(false)
  role                    Role               @default(USER)
  image                   String?
  password                String?
  createdAt               DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime           @updatedAt @db.Timestamptz(3)
  courses                 Course[]
  scores                  UserScores[]
  Friends                 Friends[]          @relation(name: "friends_users")
  Friends_request         Friends[]          @relation(name: "friends_friends")
  VerificationForm        VerificationForm[]
  Moderator               Moderator[]
  Achievement             Achievement[]
  FriendsRequests         FriendsRequests[]  @relation(name: "friends_requests_user")
  FriendsRequests_friends FriendsRequests[]  @relation(name: "friends_requests_friend")
}

model Course {
  id           String        @id @default(uuid())
  name         String
  creatorId    String
  createdAt    DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
  verified     Boolean       @default(false)
  summary      String        @default("")
  category     Category
  tag          String        @default("Other")
  creator      User          @relation(fields: [creatorId], references: [id])
  text         CourseItem[]
  Quiz         Quiz[]
  moderator    Moderator     @relation(fields: [moderatorId], references: [id])
  moderatorId  String
  language     String        @default("en")
}

model CourseItem {
  id        String         @id @default(uuid())
  courseId  String
  type      CourseItemType
  value     String
  course    Course         @relation(fields: [courseId], references: [id])
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt DateTime       @updatedAt @db.Timestamptz(3)
}

model Quiz {
  id         String       @id @default(uuid())
  courseId   String
  name       String
  questions  Question[]
  UserScores UserScores[]
  course     Course       @relation(fields: [courseId], references: [id])
}

model Question {
  id       String   @id @default(uuid())
  quizId   String
  question String
  answers  String[]
  correct  String[]
  type     QuestionType @default(SINGLE_ANSWER)
  Quiz Quiz @relation(fields: [quizId], references: [id])
}

model UserScores {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  score     Int
  noQuest   Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  User      User     @relation(fields: [userId], references: [id])
  Quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Friends {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  User      User     @relation(name: "friends_users", fields: [userId], references: [id])
  Friend    User     @relation(name: "friends_friends", fields: [friendId], references: [id])
}

model FriendsRequests {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  User      User     @relation(name: "friends_requests_user", fields: [userId], references: [id])
  Friend    User     @relation(name: "friends_requests_friend", fields: [friendId], references: [id])
}

model VerificationForm {
  id        String   @id @default(uuid())
  userId    String
  text      String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  User      User     @relation(fields: [userId], references: [id])
}

model Moderator {
  id         String     @id @default(uuid())
  userId     String
  createdAt  DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime   @updatedAt @db.Timestamptz(3)
  categories Category[]
  User       User       @relation(fields: [userId], references: [id])
  Course     Course[]
}

model Achievement {
  id        String   @id @default(uuid())
  userId    String
  award     AchievementType
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  User      User     @relation(fields: [userId], references: [id])
}

enum CourseItemType {
  photo
  text
}

enum AchievementType {
  numberOfFriends10
  numberOfFriends100
  numberOfGames1000
  numberOfGames10000
  numberOfCreatedCourses10
  numberOfCreatedCourses100
  getVerification
  getFirstFriend
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum Category {
  MATH
  SCIENCE
  HISTORY
  GEOGRAPHY
  ENGLISH
  ART
  MUSIC
  SPORTS
  OTHER
}

enum QuizOptions {
  EXCLUDE_DATES
  MULTIPLE_CHOICES
  TRUE_FALSE
}

enum QuestionType {
  SINGLE_ANSWER
  MULTIPLE_ANSWER
  TRUE_FALSE
}